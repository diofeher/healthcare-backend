{"version":3,"sources":["../../src/api/index.js"],"names":["storj","bridgeUrl","bridgeUser","bridgePass","encryptionKey","logLevel","bucketId","fs","require","config","db","api","use","get","req","res","json","version","post","filePath","__dirname","body","userId","listFiles","err","result","i","length","deleteFile","appendFile","data","console","log","storeFile","filename","progressCallback","progress","downloadedBytes","totalBytes","finishedCallback","fileId","error","unlink","fileID","stat","state","resolveFile","params","fileid","readFile"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AAEA,IAAIA,QAAQ,uBAAgB;AAClBC,eAAW,sBADO;AAElBC,gBAAY,oBAFM;AAGlBC,gBAAY,SAHM;AAIlBC,mBAAe,gFAJG;AAKlBC,cAAU;AALQ,CAAhB,CAAZ;AAOA,IAAIC,WAAW,0BAAf;AACA,IAAIC,KAAKC,QAAQ,IAAR,CAAT;;kBAEe,gBAAoB;AAAA,QAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,QAATC,EAAS,QAATA,EAAS;;AAClC,QAAIC,MAAM,sBAAV;;AAEA;AACAA,QAAIC,GAAJ,CAAQ,SAAR,EAAmB,sBAAO,EAAEH,cAAF,EAAUC,MAAV,EAAP,CAAnB;;AAEA;AACAC,QAAIE,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1BA,YAAIC,IAAJ,CAAS,EAAEC,yBAAF,EAAT;AACA,KAFD;;AAIGN,QAAIO,IAAJ,CAAS,UAAT,EAAqB,UAACJ,GAAD,EAAMC,GAAN,EAAc;AAC/B;AACA;AACA;AACA,YAAII,WAAWC,YAAYN,IAAIO,IAAJ,CAASC,MAApC;AACAtB,cAAMuB,SAAN,CAAgBjB,QAAhB,EAA0B,UAASkB,GAAT,EAAcC,MAAd,EAAsB;AAC5C,iBAAI,IAAIC,IAAE,CAAV,EAAaA,IAAED,OAAOE,MAAtB,EAA8BD,GAA9B,EAAmC;AAC/B,oBAAGP,YAAYM,OAAOC,CAAP,EAAU,UAAV,CAAf,EAAsC;AAClC1B,0BAAM4B,UAAN,CAAiBtB,QAAjB,EAA2BmB,OAAOC,CAAP,EAAU,IAAV,CAA3B,EAA4C,UAASF,GAAT,EAAcC,MAAd,EAAsB,CACjE,CADD;AAEH;AACJ;AACDlB,eAAGsB,UAAH,CAAcV,QAAd,EAAwBL,IAAIO,IAAJ,CAASS,IAAjC,EAAuC,UAASN,GAAT,EAAc;AACjD,oBAAIA,GAAJ,EAAS;AACL,2BAAOO,QAAQC,GAAR,CAAYR,GAAZ,CAAP;AACH,iBAFD,MAGK;AACDxB,0BAAMiC,SAAN,CAAgB3B,QAAhB,EAA0Ba,QAA1B,EAAoC;AAChCe,kCAAUf,QADsB;AAEhCgB,0CAAkB,0BAASC,QAAT,EAAmBC,eAAnB,EAAoCC,UAApC,EAAgD;AAC9DP,oCAAQC,GAAR,CAAY,WAAZ,EAAyBI,QAAzB;AACH,yBAJ+B;AAKhCG,0CAAkB,0BAASf,GAAT,EAAcgB,MAAd,EAAsB;AACpC,gCAAIhB,GAAJ,EAAS;AACP,uCAAOO,QAAQU,KAAR,CAAcjB,GAAd,CAAP;AACD;AACDO,oCAAQC,GAAR,CAAY,gBAAZ,EAA8BQ,MAA9B;AACAjC,+BAAGmC,MAAH,CAAUvB,QAAV;AACAJ,gCAAIC,IAAJ,CAAS,EAAC2B,QAAQH,MAAT,EAAT;AACH;AAZ+B,qBAApC;AAcH;AACJ,aApBD;AAqBH,SA5BD;AA6BH,KAlCD;;AAoCA7B,QAAIE,GAAJ,CAAQ,oBAAR,EAA8B,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxC,YAAII,WAAWC,YAAY,UAA3B;AACAb,WAAGqC,IAAH,CAAQzB,QAAR,EAAkB,UAASK,GAAT,EAAcC,MAAd,EAAsB;AACpCM,oBAAQC,GAAR,CAAY,mBAAZ;AACAD,oBAAQC,GAAR,CAAYR,GAAZ;AACA,gBAAGA,OAAO,IAAV,EAAgB;AACZjB,mBAAGmC,MAAH,CAAUvB,QAAV;AACH;AACD,gBAAI0B,QAAQ7C,MAAM8C,WAAN,CAAkBxC,QAAlB,EAA4BQ,IAAIiC,MAAJ,CAAWC,MAAvC,EAA+C7B,QAA/C,EAAyD;AACnEgB,kCAAkB,0BAASC,QAAT,EAAmBC,eAAnB,EAAoCC,UAApC,EAAgD,CAAE,CADD;AAEnEC,kCAAkB,0BAASf,GAAT,EAAc;AAC9B,wBAAIA,GAAJ,EAAS;AACP,+BAAOO,QAAQU,KAAR,CAAcjB,GAAd,CAAP;AACD,qBAFD,MAGK;AACDjB,2BAAG0C,QAAH,CAAY9B,QAAZ,EAAsB,MAAtB,EAA8B,UAAUK,GAAV,EAAcM,IAAd,EAAoB;AAC9C,gCAAIN,GAAJ,EAAS;AACL,uCAAOO,QAAQC,GAAR,CAAYR,GAAZ,CAAP;AACH;AACDT,gCAAIC,IAAJ,CAAS,EAACc,MAAMA,IAAP,EAAT;AACAvB,+BAAGmC,MAAH,CAAUvB,QAAV;AACH,yBAND;AAOH;AACDY,4BAAQC,GAAR,CAAY,wBAAZ;AACD;AAhBkE,aAAzD,CAAZ;AAkBH,SAxBD;AAyBH,KA3BD;;AA6BH,WAAOrB,GAAP;AACA,C","file":"index.js","sourcesContent":["import { version } from '../../package.json';\nimport { Router } from 'express';\nimport facets from './facets';\nimport { Environment } from 'storj';\n\nvar storj = new Environment({\n          bridgeUrl: 'https://api.storj.io',\n          bridgeUser: 'diofeher@gmail.com',\n          bridgePass: 'test123',\n          encryptionKey: 'member chunk want clarify manage blossom unable cream when fiction dance steak',\n          logLevel: 0\n        });\nvar bucketId = 'd6f74c949738d5303a8dea80';\nvar fs = require('fs');\n\nexport default ({ config, db }) => {\n\tlet api = Router();\n\n\t// mount the facets resource\n\tapi.use('/facets', facets({ config, db }));\n\n\t// perhaps expose some API metadata at the root\n\tapi.get('/', (req, res) => {\n\t\tres.json({ version });\n\t});\n\n    api.post('/upload/', (req, res) => {\n        // SAVE THE DATA AND SEND THE FILE TO STORJ\n        // TODO: Randomize the file name or use stream in Storj.io\n        // console.log(req.body);\n        var filePath = __dirname + req.body.userId;\n        storj.listFiles(bucketId, function(err, result) {\n            for(var i=0; i<result.length; i++) {\n                if(filePath == result[i]['filename']) {\n                    storj.deleteFile(bucketId, result[i]['id'], function(err, result) {\n                    });\n                }\n            }\n            fs.appendFile(filePath, req.body.data, function(err) {\n                if (err) {\n                    return console.log(err);\n                }\n                else {\n                    storj.storeFile(bucketId, filePath, {\n                        filename: filePath,\n                        progressCallback: function(progress, downloadedBytes, totalBytes) {\n                            console.log('progress:', progress);\n                        },\n                        finishedCallback: function(err, fileId) {\n                            if (err) {\n                              return console.error(err);\n                            }\n                            console.log('File complete:', fileId);\n                            fs.unlink(filePath);\n                            res.json({fileID: fileId});\n                        }\n                    });\n                }\n            });\n        }); \n    });\n\n    api.get('/download/:fileid/', (req, res) => {\n        var filePath = __dirname + '/test.js';\n        fs.stat(filePath, function(err, result) {\n            console.log('unlink file first');\n            console.log(err);\n            if(err == null) {\n                fs.unlink(filePath);\n            }\n            var state = storj.resolveFile(bucketId, req.params.fileid, filePath, {\n              progressCallback: function(progress, downloadedBytes, totalBytes) {},\n              finishedCallback: function(err) {\n                if (err) {\n                  return console.error(err);\n                }\n                else {\n                    fs.readFile(filePath, 'utf8', function (err,data) {\n                        if (err) {\n                            return console.log(err);\n                        }\n                        res.json({data: data})\n                        fs.unlink(filePath)\n                    });\n                }\n                console.log('File download complete');\n              }\n            });\n        });\n    });\n\n\treturn api;\n}\n"]}