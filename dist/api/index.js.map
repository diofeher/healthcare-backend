{"version":3,"sources":["../../src/api/index.js"],"names":["storj","bridgeUrl","bridgeUser","bridgePass","encryptionKey","logLevel","bucketId","filename","config","db","api","use","get","req","res","json","version","post","filePath","__dirname","fs","require","writeFile","body","err","console","log","storeFile","progressCallback","progress","downloadedBytes","totalBytes","finishedCallback","fileId","error","unlink","data","downloadFilePath","state","resolveFile"],"mappings":";;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;AAEA,IAAIA,QAAQ,uBAAgB;AAClBC,aAAW,sBADO;AAElBC,cAAY,oBAFM;AAGlBC,cAAY,SAHM;AAIlBC,iBAAe,gFAJG;AAKlBC,YAAU;AALQ,CAAhB,CAAZ;AAOA,IAAIC,WAAW,0BAAf;AACA,IAAIC,WAAW,kBAAf;;kBAEe,gBAAoB;AAAA,MAAjBC,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AAClC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,GAAJ,CAAQ,SAAR,EAAmB,sBAAO,EAAEH,cAAF,EAAUC,MAAV,EAAP,CAAnB;;AAEA;AACAC,MAAIE,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1BA,QAAIC,IAAJ,CAAS,EAAEC,yBAAF,EAAT;AACA,GAFD;;AAIGN,MAAIO,IAAJ,CAAS,UAAT,EAAqB,UAACJ,GAAD,EAAMC,GAAN,EAAc;AAC/B;AACA;AACA;AACA,QAAII,WAAWC,YAAY,WAA3B;AACA,QAAIC,KAAKC,QAAQ,IAAR,CAAT;AACAD,OAAGE,SAAH,CAAaJ,QAAb,EAAuBL,IAAIU,IAA3B,EAAiC,UAASC,GAAT,EAAc;AAC3C,UAAIA,GAAJ,EAAS,OAAOC,QAAQC,GAAR,CAAYF,GAAZ,CAAP;AACTC,cAAQC,GAAR,CAAY,8BAAZ;AACH,KAHD;;AAKA1B,UAAM2B,SAAN,CAAgBrB,QAAhB,EAA0BY,QAA1B,EAAoC;AAClCX,gBAAUA,QADwB;AAElCqB,wBAAkB,0BAASC,QAAT,EAAmBC,eAAnB,EAAoCC,UAApC,EAAgD;AAChEN,gBAAQC,GAAR,CAAY,WAAZ,EAAyBG,QAAzB;AACD,OAJiC;AAKlCG,wBAAkB,0BAASR,GAAT,EAAcS,MAAd,EAAsB;AACtC,YAAIT,GAAJ,EAAS;AACP,iBAAOC,QAAQS,KAAR,CAAcV,GAAd,CAAP;AACD;AACDC,gBAAQC,GAAR,CAAY,gBAAZ,EAA8BO,MAA9B;AACD;AAViC,KAApC;AAYAb,OAAGe,MAAH,CAAUjB,QAAV;AACAJ,QAAIC,IAAJ,CAAS,EAACqB,MAAM,MAAP,EAAT;AACH,GAzBD;;AA2BA1B,MAAIE,GAAJ,CAAQ,YAAR,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChC,QAAImB,SAAS,0BAAb;AACA,QAAII,mBAAmB,OAAO9B,QAA9B;;AAEA,QAAI+B,QAAQtC,MAAMuC,WAAN,CAAkBjC,QAAlB,EAA4B2B,MAA5B,EAAoCI,gBAApC,EAAsD;AAChET,wBAAkB,0BAASC,QAAT,EAAmBC,eAAnB,EAAoCC,UAApC,EAAgD;AAChEN,gBAAQC,GAAR,CAAY,WAAZ,EAAyBG,QAAzB;AACD,OAH+D;AAIhEG,wBAAkB,0BAASR,GAAT,EAAc;AAC9B,YAAIA,GAAJ,EAAS;AACP,iBAAOC,QAAQS,KAAR,CAAcV,GAAd,CAAP;AACD;AACDC,gBAAQC,GAAR,CAAY,wBAAZ;AACD;AAT+D,KAAtD,CAAZ;AAWH,GAfD;;AAiBH,SAAOhB,GAAP;AACA,C","file":"index.js","sourcesContent":["import { version } from '../../package.json';\nimport { Router } from 'express';\nimport facets from './facets';\nimport { Environment } from 'storj';\n\nvar storj = new Environment({\n          bridgeUrl: 'https://api.storj.io',\n          bridgeUser: 'diofeher@gmail.com',\n          bridgePass: 'test123',\n          encryptionKey: 'member chunk want clarify manage blossom unable cream when fiction dance steak',\n          logLevel: 0\n        });\nvar bucketId = 'd6f74c949738d5303a8dea80';\nvar filename = 'health-data.json';\n\nexport default ({ config, db }) => {\n\tlet api = Router();\n\n\t// mount the facets resource\n\tapi.use('/facets', facets({ config, db }));\n\n\t// perhaps expose some API metadata at the root\n\tapi.get('/', (req, res) => {\n\t\tres.json({ version });\n\t});\n\n    api.post('/upload/', (req, res) => {\n        // console.log(req.body.data);\n        // SAVE THE DATA AND SEND THE FILE TO STORJ\n        // TODO: Randomize the file name or use stream in Storj.io\n        var filePath = __dirname + '/data.txt';\n        var fs = require('fs');\n        fs.writeFile(filePath, req.body, function(err) {\n            if (err) return console.log(err);\n            console.log('Hello World > helloworld.txt');\n        });\n\n        storj.storeFile(bucketId, filePath, {\n          filename: filename,\n          progressCallback: function(progress, downloadedBytes, totalBytes) {\n            console.log('progress:', progress);\n          },\n          finishedCallback: function(err, fileId) {\n            if (err) {\n              return console.error(err);\n            }\n            console.log('File complete:', fileId);\n          }\n        });\n        fs.unlink(filePath);\n        res.json({data: 'halo' });\n    });\n\n    api.get('/download/', (req, res) => {\n        var fileId = '998960317b6725a3f8080c2b';\n        var downloadFilePath = './' + filename;\n\n        var state = storj.resolveFile(bucketId, fileId, downloadFilePath, {\n          progressCallback: function(progress, downloadedBytes, totalBytes) {\n            console.log('progress:', progress)\n          },\n          finishedCallback: function(err) {\n            if (err) {\n              return console.error(err);\n            }\n            console.log('File download complete');\n          }\n        });\n    });\n\n\treturn api;\n}\n"]}